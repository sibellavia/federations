// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Register a listener
	// (POST /hub)
	RegisterListener(ctx echo.Context) error
	// Unregister a listener
	// (DELETE /hub/{hubId})
	UnregisterListener(ctx echo.Context, hubId SubId) error
	// Notifies a listener
	// (POST /listener)
	NotifyListener(ctx echo.Context) error
	// List or find Service objects
	// (GET /service)
	ListService(ctx echo.Context, params ListServiceParams) error
	// Retrieves a Service by ID
	// (GET /service/{serviceId})
	RetrieveService(ctx echo.Context, serviceId SvcId) error
	// List or find Service Instance objects
	// (GET /serviceInstance)
	ListServiceInstance(ctx echo.Context, params ListServiceInstanceParams) error
	// Retrieves a Service Instance by ID
	// (GET /serviceInstance/{serviceInstanceId})
	RetrieveServiceInstance(ctx echo.Context, serviceInstanceId SviId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RegisterListener converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterListener(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegisterListener(ctx)
	return err
}

// UnregisterListener converts echo context to params.
func (w *ServerInterfaceWrapper) UnregisterListener(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hubId" -------------
	var hubId SubId

	err = runtime.BindStyledParameterWithOptions("simple", "hubId", ctx.Param("hubId"), &hubId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hubId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnregisterListener(ctx, hubId)
	return err
}

// NotifyListener converts echo context to params.
func (w *ServerInterfaceWrapper) NotifyListener(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NotifyListener(ctx)
	return err
}

// ListService converts echo context to params.
func (w *ServerInterfaceWrapper) ListService(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListServiceParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "defaultFilter" -------------

	err = runtime.BindQueryParameter("form", true, false, "defaultFilter", ctx.QueryParams(), &params.DefaultFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter defaultFilter: %s", err))
	}

	// ------------- Optional query parameter "allProviders" -------------

	err = runtime.BindQueryParameter("form", true, false, "allProviders", ctx.QueryParams(), &params.AllProviders)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter allProviders: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListService(ctx, params)
	return err
}

// RetrieveService converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceId" -------------
	var serviceId SvcId

	err = runtime.BindStyledParameterWithOptions("simple", "serviceId", ctx.Param("serviceId"), &serviceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RetrieveService(ctx, serviceId)
	return err
}

// ListServiceInstance converts echo context to params.
func (w *ServerInterfaceWrapper) ListServiceInstance(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListServiceInstanceParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "defaultFilter" -------------

	err = runtime.BindQueryParameter("form", true, false, "defaultFilter", ctx.QueryParams(), &params.DefaultFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter defaultFilter: %s", err))
	}

	// ------------- Optional query parameter "allProviders" -------------

	err = runtime.BindQueryParameter("form", true, false, "allProviders", ctx.QueryParams(), &params.AllProviders)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter allProviders: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListServiceInstance(ctx, params)
	return err
}

// RetrieveServiceInstance converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveServiceInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceInstanceId" -------------
	var serviceInstanceId SviId

	err = runtime.BindStyledParameterWithOptions("simple", "serviceInstanceId", ctx.Param("serviceInstanceId"), &serviceInstanceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceInstanceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RetrieveServiceInstance(ctx, serviceInstanceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/hub", wrapper.RegisterListener)
	router.DELETE(baseURL+"/hub/:hubId", wrapper.UnregisterListener)
	router.POST(baseURL+"/listener", wrapper.NotifyListener)
	router.GET(baseURL+"/service", wrapper.ListService)
	router.GET(baseURL+"/service/:serviceId", wrapper.RetrieveService)
	router.GET(baseURL+"/serviceInstance", wrapper.ListServiceInstance)
	router.GET(baseURL+"/serviceInstance/:serviceInstanceId", wrapper.RetrieveServiceInstance)

}
