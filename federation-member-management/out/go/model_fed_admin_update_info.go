/*
FHSOperator API

This is the FHSOperator API for the IEEE 2302-2021 Standard for Intercloud Interoperability and Federation (https://standards.ieee.org/ieee/2302/7056).  This standard is based on the NIST Cloud Federation Reference Architecture (CFRA), SP 500-332, (https://doi.org/10.6028/NIST.SP.500-332).

API version: 0.1
Contact: lee@keyvoms.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FedAdminUpdateInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FedAdminUpdateInfo{}

// FedAdminUpdateInfo struct for FedAdminUpdateInfo
type FedAdminUpdateInfo struct {
	MemberName *string `json:"member_name,omitempty"`
	Email *string `json:"email,omitempty"`
	Description *string `json:"description,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
}

// NewFedAdminUpdateInfo instantiates a new FedAdminUpdateInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFedAdminUpdateInfo() *FedAdminUpdateInfo {
	this := FedAdminUpdateInfo{}
	return &this
}

// NewFedAdminUpdateInfoWithDefaults instantiates a new FedAdminUpdateInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFedAdminUpdateInfoWithDefaults() *FedAdminUpdateInfo {
	this := FedAdminUpdateInfo{}
	return &this
}

// GetMemberName returns the MemberName field value if set, zero value otherwise.
func (o *FedAdminUpdateInfo) GetMemberName() string {
	if o == nil || IsNil(o.MemberName) {
		var ret string
		return ret
	}
	return *o.MemberName
}

// GetMemberNameOk returns a tuple with the MemberName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FedAdminUpdateInfo) GetMemberNameOk() (*string, bool) {
	if o == nil || IsNil(o.MemberName) {
		return nil, false
	}
	return o.MemberName, true
}

// HasMemberName returns a boolean if a field has been set.
func (o *FedAdminUpdateInfo) HasMemberName() bool {
	if o != nil && !IsNil(o.MemberName) {
		return true
	}

	return false
}

// SetMemberName gets a reference to the given string and assigns it to the MemberName field.
func (o *FedAdminUpdateInfo) SetMemberName(v string) {
	o.MemberName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *FedAdminUpdateInfo) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FedAdminUpdateInfo) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *FedAdminUpdateInfo) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *FedAdminUpdateInfo) SetEmail(v string) {
	o.Email = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FedAdminUpdateInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FedAdminUpdateInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FedAdminUpdateInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FedAdminUpdateInfo) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FedAdminUpdateInfo) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FedAdminUpdateInfo) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *FedAdminUpdateInfo) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *FedAdminUpdateInfo) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o FedAdminUpdateInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FedAdminUpdateInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MemberName) {
		toSerialize["member_name"] = o.MemberName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableFedAdminUpdateInfo struct {
	value *FedAdminUpdateInfo
	isSet bool
}

func (v NullableFedAdminUpdateInfo) Get() *FedAdminUpdateInfo {
	return v.value
}

func (v *NullableFedAdminUpdateInfo) Set(val *FedAdminUpdateInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFedAdminUpdateInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFedAdminUpdateInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFedAdminUpdateInfo(val *FedAdminUpdateInfo) *NullableFedAdminUpdateInfo {
	return &NullableFedAdminUpdateInfo{value: val, isSet: true}
}

func (v NullableFedAdminUpdateInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFedAdminUpdateInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


