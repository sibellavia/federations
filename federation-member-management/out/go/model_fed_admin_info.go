/*
FHSOperator API

This is the FHSOperator API for the IEEE 2302-2021 Standard for Intercloud Interoperability and Federation (https://standards.ieee.org/ieee/2302/7056).  This standard is based on the NIST Cloud Federation Reference Architecture (CFRA), SP 500-332, (https://doi.org/10.6028/NIST.SP.500-332).

API version: 0.1
Contact: lee@keyvoms.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FedAdminInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FedAdminInfo{}

// FedAdminInfo struct for FedAdminInfo
type FedAdminInfo struct {
	MemberId string `json:"member_id"`
	MemberName string `json:"member_name"`
	Email *string `json:"email,omitempty"`
	Description *string `json:"description,omitempty"`
	Enabled bool `json:"enabled"`
	FedsOwned []FederationID `json:"feds_owned"`
}

type _FedAdminInfo FedAdminInfo

// NewFedAdminInfo instantiates a new FedAdminInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFedAdminInfo(memberId string, memberName string, enabled bool, fedsOwned []FederationID) *FedAdminInfo {
	this := FedAdminInfo{}
	this.MemberId = memberId
	this.MemberName = memberName
	this.Enabled = enabled
	this.FedsOwned = fedsOwned
	return &this
}

// NewFedAdminInfoWithDefaults instantiates a new FedAdminInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFedAdminInfoWithDefaults() *FedAdminInfo {
	this := FedAdminInfo{}
	return &this
}

// GetMemberId returns the MemberId field value
func (o *FedAdminInfo) GetMemberId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MemberId
}

// GetMemberIdOk returns a tuple with the MemberId field value
// and a boolean to check if the value has been set.
func (o *FedAdminInfo) GetMemberIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemberId, true
}

// SetMemberId sets field value
func (o *FedAdminInfo) SetMemberId(v string) {
	o.MemberId = v
}

// GetMemberName returns the MemberName field value
func (o *FedAdminInfo) GetMemberName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MemberName
}

// GetMemberNameOk returns a tuple with the MemberName field value
// and a boolean to check if the value has been set.
func (o *FedAdminInfo) GetMemberNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemberName, true
}

// SetMemberName sets field value
func (o *FedAdminInfo) SetMemberName(v string) {
	o.MemberName = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *FedAdminInfo) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FedAdminInfo) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *FedAdminInfo) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *FedAdminInfo) SetEmail(v string) {
	o.Email = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FedAdminInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FedAdminInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FedAdminInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FedAdminInfo) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *FedAdminInfo) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *FedAdminInfo) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *FedAdminInfo) SetEnabled(v bool) {
	o.Enabled = v
}

// GetFedsOwned returns the FedsOwned field value
func (o *FedAdminInfo) GetFedsOwned() []FederationID {
	if o == nil {
		var ret []FederationID
		return ret
	}

	return o.FedsOwned
}

// GetFedsOwnedOk returns a tuple with the FedsOwned field value
// and a boolean to check if the value has been set.
func (o *FedAdminInfo) GetFedsOwnedOk() ([]FederationID, bool) {
	if o == nil {
		return nil, false
	}
	return o.FedsOwned, true
}

// SetFedsOwned sets field value
func (o *FedAdminInfo) SetFedsOwned(v []FederationID) {
	o.FedsOwned = v
}

func (o FedAdminInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FedAdminInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["member_id"] = o.MemberId
	toSerialize["member_name"] = o.MemberName
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	toSerialize["feds_owned"] = o.FedsOwned
	return toSerialize, nil
}

func (o *FedAdminInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"member_id",
		"member_name",
		"enabled",
		"feds_owned",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFedAdminInfo := _FedAdminInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFedAdminInfo)

	if err != nil {
		return err
	}

	*o = FedAdminInfo(varFedAdminInfo)

	return err
}

type NullableFedAdminInfo struct {
	value *FedAdminInfo
	isSet bool
}

func (v NullableFedAdminInfo) Get() *FedAdminInfo {
	return v.value
}

func (v *NullableFedAdminInfo) Set(val *FedAdminInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFedAdminInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFedAdminInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFedAdminInfo(val *FedAdminInfo) *NullableFedAdminInfo {
	return &NullableFedAdminInfo{value: val, isSet: true}
}

func (v NullableFedAdminInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFedAdminInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


