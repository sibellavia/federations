/*
FHSOperator API

This is the FHSOperator API for the IEEE 2302-2021 Standard for Intercloud Interoperability and Federation (https://standards.ieee.org/ieee/2302/7056).  This standard is based on the NIST Cloud Federation Reference Architecture (CFRA), SP 500-332, (https://doi.org/10.6028/NIST.SP.500-332).

API version: 0.1
Contact: lee@keyvoms.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ConnectionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionInfo{}

// ConnectionInfo struct for ConnectionInfo
type ConnectionInfo struct {
	ConnectionId string `json:"connection_id"`
	FHS_URL string `json:"FHS_URL"`
	Description *string `json:"description,omitempty"`
	Status string `json:"status"`
	TimeEstablished *time.Time `json:"time_established,omitempty"`
	TimeTerminated *time.Time `json:"time_terminated,omitempty"`
	KnownFederations []FederationID `json:"known_federations"`
}

type _ConnectionInfo ConnectionInfo

// NewConnectionInfo instantiates a new ConnectionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionInfo(connectionId string, fHSURL string, status string, knownFederations []FederationID) *ConnectionInfo {
	this := ConnectionInfo{}
	this.ConnectionId = connectionId
	this.FHS_URL = fHSURL
	this.Status = status
	this.KnownFederations = knownFederations
	return &this
}

// NewConnectionInfoWithDefaults instantiates a new ConnectionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionInfoWithDefaults() *ConnectionInfo {
	this := ConnectionInfo{}
	return &this
}

// GetConnectionId returns the ConnectionId field value
func (o *ConnectionInfo) GetConnectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value
// and a boolean to check if the value has been set.
func (o *ConnectionInfo) GetConnectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionId, true
}

// SetConnectionId sets field value
func (o *ConnectionInfo) SetConnectionId(v string) {
	o.ConnectionId = v
}

// GetFHS_URL returns the FHS_URL field value
func (o *ConnectionInfo) GetFHS_URL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FHS_URL
}

// GetFHS_URLOk returns a tuple with the FHS_URL field value
// and a boolean to check if the value has been set.
func (o *ConnectionInfo) GetFHS_URLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FHS_URL, true
}

// SetFHS_URL sets field value
func (o *ConnectionInfo) SetFHS_URL(v string) {
	o.FHS_URL = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConnectionInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConnectionInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConnectionInfo) SetDescription(v string) {
	o.Description = &v
}

// GetStatus returns the Status field value
func (o *ConnectionInfo) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ConnectionInfo) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ConnectionInfo) SetStatus(v string) {
	o.Status = v
}

// GetTimeEstablished returns the TimeEstablished field value if set, zero value otherwise.
func (o *ConnectionInfo) GetTimeEstablished() time.Time {
	if o == nil || IsNil(o.TimeEstablished) {
		var ret time.Time
		return ret
	}
	return *o.TimeEstablished
}

// GetTimeEstablishedOk returns a tuple with the TimeEstablished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionInfo) GetTimeEstablishedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeEstablished) {
		return nil, false
	}
	return o.TimeEstablished, true
}

// HasTimeEstablished returns a boolean if a field has been set.
func (o *ConnectionInfo) HasTimeEstablished() bool {
	if o != nil && !IsNil(o.TimeEstablished) {
		return true
	}

	return false
}

// SetTimeEstablished gets a reference to the given time.Time and assigns it to the TimeEstablished field.
func (o *ConnectionInfo) SetTimeEstablished(v time.Time) {
	o.TimeEstablished = &v
}

// GetTimeTerminated returns the TimeTerminated field value if set, zero value otherwise.
func (o *ConnectionInfo) GetTimeTerminated() time.Time {
	if o == nil || IsNil(o.TimeTerminated) {
		var ret time.Time
		return ret
	}
	return *o.TimeTerminated
}

// GetTimeTerminatedOk returns a tuple with the TimeTerminated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionInfo) GetTimeTerminatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeTerminated) {
		return nil, false
	}
	return o.TimeTerminated, true
}

// HasTimeTerminated returns a boolean if a field has been set.
func (o *ConnectionInfo) HasTimeTerminated() bool {
	if o != nil && !IsNil(o.TimeTerminated) {
		return true
	}

	return false
}

// SetTimeTerminated gets a reference to the given time.Time and assigns it to the TimeTerminated field.
func (o *ConnectionInfo) SetTimeTerminated(v time.Time) {
	o.TimeTerminated = &v
}

// GetKnownFederations returns the KnownFederations field value
func (o *ConnectionInfo) GetKnownFederations() []FederationID {
	if o == nil {
		var ret []FederationID
		return ret
	}

	return o.KnownFederations
}

// GetKnownFederationsOk returns a tuple with the KnownFederations field value
// and a boolean to check if the value has been set.
func (o *ConnectionInfo) GetKnownFederationsOk() ([]FederationID, bool) {
	if o == nil {
		return nil, false
	}
	return o.KnownFederations, true
}

// SetKnownFederations sets field value
func (o *ConnectionInfo) SetKnownFederations(v []FederationID) {
	o.KnownFederations = v
}

func (o ConnectionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connection_id"] = o.ConnectionId
	toSerialize["FHS_URL"] = o.FHS_URL
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.TimeEstablished) {
		toSerialize["time_established"] = o.TimeEstablished
	}
	if !IsNil(o.TimeTerminated) {
		toSerialize["time_terminated"] = o.TimeTerminated
	}
	toSerialize["known_federations"] = o.KnownFederations
	return toSerialize, nil
}

func (o *ConnectionInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connection_id",
		"FHS_URL",
		"status",
		"known_federations",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectionInfo := _ConnectionInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectionInfo)

	if err != nil {
		return err
	}

	*o = ConnectionInfo(varConnectionInfo)

	return err
}

type NullableConnectionInfo struct {
	value *ConnectionInfo
	isSet bool
}

func (v NullableConnectionInfo) Get() *ConnectionInfo {
	return v.value
}

func (v *NullableConnectionInfo) Set(val *ConnectionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionInfo(val *ConnectionInfo) *NullableConnectionInfo {
	return &NullableConnectionInfo{value: val, isSet: true}
}

func (v NullableConnectionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


